name: Markdown quality check

on:
  pull_request:
    branches:
      - development
    paths:
      - '_posts/**/*.md' # Trigger only when Markdown files in _posts are changed

jobs:
  markdown-linting:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: _posts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Markdown Linting
        uses: avto-dev/markdown-lint@v1
        with:
          config: '.markdownlint.json'

  markdown-link-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: _posts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Markdown Link Check
        uses: gaurav-nelson/github-action-markdown-link-check@v1

  markdown-header-check:
    runs-on: ubuntu-latest
    steps:        
      - name: Check Markdown File Headers
        working-directory: '_posts/'
        run: |
            # Define function to check headers
            function check_markdown_header {
            local file=$1
            local missing_component=false

            # Header components to check
            local components=(
                "^---$"
                "^title: .+"
                "^published: .+"
                "^description: .+"
                "^tags: .+"
                "^cover_image: .+"
                "^canonical_url: .+"
                "^id: .*"
                "^---$"
            )

            for component in "${components[@]}"; do
                if ! grep -Pq "$component" "$file"; then
                echo "Missing or incorrect in \"$file\": $component"
                missing_component=true
                fi
            done

            if [ "$missing_component" = true ]; then
                return 1
            else
                return 0
            fi
            }

            # Change the Internal Field Separator to newline
            IFS=$'\n'

            # Variable to track errors
            error=0

            # Loop through all markdown files in the PR
            for file in $(git diff --name-only --diff-filter=ACMRT ${{ github.event.before }} ${{ github.sha }} | grep '\.md$'); do
            check_markdown_header "$file" || error=$((error+1))
            done

            # Fail the job if any errors were found
            if [ $error -ne 0 ]; then
            echo "There are $error files without the required header format."
            exit 1
            else
            echo "All Markdown files have the required header format."
            fi

#   spell-check:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: _posts
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
      
#       - name: Spell Check
#         uses: rojopolis/spellcheck-github-actions@0.16.0
#         with:
#           markdown_files_only: true
#           ignore_file: '.spellignore'

